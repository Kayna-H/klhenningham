manager and clerk share some commonality as they all work in the same company: they all get paid by the company; yet they are different enough in the roles and activities as manager deals with adding or removing listing of the inventory and clerk deals with transaction and adjusting quantity of items listed in inventory.
"The subclass basically inherits state and behavior in the form of variables and methods from its Superclass. In our case, we can have two types of people i.e. Manager and clerk who are managing the inventory. Thus both Manager is a Person and also Clerk is a person"
"It makes sense to use subclasses in this situation because of the following reasons:1. Manager and clerk may both have a lot of common attributes such as name, address, phone numbers., etc which can be grouped together in one class.2. The will also both have a removeItem method which can be included in the User class and overridden in each of the sub classes as per the different scenarios when they can remove items.3. Additionally, the Manager will have few privileges which the Clerk may not, and such methods can then be included in the Manager class."
"Since, our system is having two types of people who are managing the inventory, so here our Parent class will be Person. Now, the two subclasses of Person will be Manager and Clerk. Since, Manager is a Person. Clerk is a Person"
"Both subclasses Manager and Clerk can be considered as a Employee and follow Is A hierarchy a type of Employee.Manager and Clerk may have similar attribute like details related to employee salary, name, date of joining etc. Also they may implement there own version of methods like add item or remove item."
"The manager and clerk are subclasses of admin, because each onehas all the attributes of admin, they can add or remove items from the inventor. But they can do this work in different situations."
The manager and the clerk are both type of person and there are other people like manufacturers
"to keep track of the inventory, we need to use the item and cost. Because item and cost can affect the number of inventory."
It makes sense to use this subclasses in the situation is because the superclass can contain many common attributes which the subclass possess.
"User class will be a generic class consisting of credentials like name, email address and designation of any particular person.Manager and Clerk will also need same kind of information so these can be subclasses of User class and inherit the common information (fields and functions), additionally they can add their own implementation for functions and fields if required."
The Manager is an employee of storeAnd clerk is an employee of store as well.This is a relationship defines sub-class super class relationship
Since both purchase and return belongs to or will affect the inventory.
"Both Manager and Clerk display some commonality and will hence share a lot of fields and functionalities; for example Name, Employee_ID, etc and these traits can be accommodated in a super class. The difference in their behavior can be handled in the respective subclass."
"Both Manager and Clerk share the responsibility of adding and removing inventory items, thus, should be a subclass of a common Staff class."
"manager and clerk are subclasses of system, because each one belong to the system and they operate the system to manage the inventory, but in different ways."
"The system needs to be used by either a manger or a clerk. When a manager or a clerk adds or removes the inventory's items, different behavior is expected, since the manager deals with introducing/discontinuing products while a clerk deals with selling/adding individual items. Both a clerk and manager would likely have common information (i.e. username, password, etc) which could be stored in a User superclass. The clerk and manager subclasses could also overload methods for adding items or removing them, allowing each to implement the functionality uniquely for that role. Without using the User superclass, there would be redundancies in functionality and data."
"Manager and Clerk both can remove and add items from inventory, but they have different situations to remove and add.It's not clear their behavior is different enough to warrant subclassing."
"A manager and a clerk will have a lot of things in common such as name, email, address, phone among other details. They also have some common abilities with respect to items. For instance, both of them can delete an item from the inventory. Therefore, generalizing them as a User makes sense. It allows us to re-use a lot of repetitive stuff. Secondly, Managers and Clerks have their own capabilities which can be defined in their respective sub-classes. For instance, a manager may be able to add a new item to the inventory when stocks are refilled. However, a clerk may not have that ability."
"We define a superclass-subclass relationship if the subclass IS_A type of superclass. Here, in the description requirement, we can see that the manager IS_A User and Clerk IS_A user of the system but their functionality is different. Hence, it makes sense to declare superclass ""User"" that will store fields and methods common to any user like basic login functionality, changing user profile, etc. in the system while Manager and Clerk subclasses can inherit those methods and variables directly from User class and we can add class-specific functionality to the subclass."
Manager and Clerk will have almost all the same attributes which we can put in superclass but actual operation performed by manager and clerk is different.
"Both of them have the functionality of adding of removing items, repeating which would be a violation of the DRY principle."
There can be different types of employees which can share some common functionalities thus extending the Employees superclass helps in following the DRY principle.
"because both the manager and clerk are the type of admins which can manipulate the item itself or quantity. Since, they both have similar work and access same thing ( items of inventory ), also, they both are employees of the small store, that's why they have been made sub class of a super class"
"For different items, the cost calculation might be different and so the stock. Here Stock can help the inventory manager keep track of the items and reorder the stock. And the cost will vary as well"
The manager and the clerk have similar functionalities like adding and removing items from the inventory. These functionalities can be implemented in a parent class (Employee) which the manager and clerk class can inherit
Both the Manager and Clerk class can inherit from a superclass User which can implement the common methods for both.For e.g add and remove method are common for Manager and Clerk just that a Manager can add after manufacture introduces/discontinues an item and Clerk can add/remove after Customer purchase/refund.
"Both Manager and Clerk can add or remove items from the inventory. This is a common functionality and as per DRY principle, should be at a common place."
System will have manager and clerk and based on the updation of stock will reorder.
User can be an abstract class which can add and remove an item from the inventory. Manager and Clerk would perform these tasks based on different events.
Employee :- It will be super class which will have methods add/remove items from system.Manager :- It will inherit the methods based on manufacturer's actionClerk :- It will inherit the methods based on clerk's action
"Manager and Clerk are Employees of an organization and share some common methods and parameters. Clearly, this hierarchy reflects here because Manager and Clerk also have different methods and it makes sense to define them as Superclass and Subclass"
"Manager and clerk, both can add and remove items from the inventory. These functionalities are common between the two classes and can therefore be moved to the employee class (superclass)."
Because both the subclasses depend on the quantity bought or sold
Manager and Clerk both have a responsibility to add or remove items from the inventory but they have their own condition for doing so. If we implement a single class Employee who consists of function to add and remove then Clerk and Manager can simply inherit the properties of Parent class and make use of Overriding to achieve polymorphism.
"It makes sense to subclass Manager and Clerk from the superclass Employee because both these subclasses may have many attributes in common. For example, both may have ""Name"", ""ContactNumber"", ""Experience(Yrs)"" and common methods like ""AddItem"", ""RemoveItem"" and so on. But as per the specification, the methods of add/remove item are triggered differently depending on whether the manufacturer influences this change or the customer. Thus, the subclasses ""Manager"" and ""Clerk"" can override these methods to suit the context of the ""manufacturer"" and ""customers"" respectively.For example, in the case of the Manager, those functions may introduce a whole new item or discontinue an existing one which will affect the entire inventory. On the other hand, the clerk's functions may increment or decrement the stock of the item that the customer purchased or returned."
Here Human can be made as super class for manager and clerk as Manager and clerk are both humans and shares the properties of human.
"Both managers and clerks can perform similar actions, namely adding/removing items from the inventory. It makes sense to not implement the actions twice. It also satisfies the ""Is a"" relationship, i.e. ""Manager is an Admin"" and ""Clerk is an Admin""."
"The manager and clerk both can add or removes items from the inventory, which is a common muthod and could reuse in superclass. And their function are still have diffenence, which could be specified by overriding."
"Both manager and clerk are staff for the store, they share some same attributes but have different access ability to the system."
We have the same attributes for both manager and clerk except for their working so it is better to have them as subclasses of human
"First, both manager and clerk has the responsibility of adding or removing an items form inventory. Hence, DRY principle helps here. Both can be inherited from a Superclass Employee.Second, Both can be identified as employee and can share the name, employee code ets fields.Third, it makes sense to say there is a IS-A relationship between subclass and superclass here."
Price and cost could both be instances of a general Quantity_Pricing class as both of them related to cost but one is the wholesale cost and other is retail price.
"because every manager is a worker and every clerk is a worker, and both of them share common functionality like both can add or remove items from the inventory."
We can have a class System which would be a super class to our two classes that do the item updation operation and both of which are people. So our child classes can be Manager and Clerk.
Manager and Clerk both have some common properties like they can add or remove items from inventory but their logic of adding or removing is different.
"Manager and Clerk do similar actions thus we can declare an abstract class Employee which has two methods - addToInventory and removeFromInventory. We can define the methods in the subclasses, based on whether a manufacturer or a customer is the reason for a call to these methods."
"Manager and Clerk can typically be referred to as the employee of an organization. They would have many common attributes and methods such - Employee Name, salary, contact number, contact address. But they both could have different actions to perform, for example, a manager could have the right to add or remove items from the inventory while Clerk can add or remove items from the inventory when a customer purchases or returns an item. Thus there are different levels of privileges depending upon the type of employee. Therefore, these non-trivial operations can be implemented in their respective subclasses and common operations can be kept in the superclass."
Manager and Clerk have same functionality of adds or removes items from the inventory. So here we can create superclass named ---- Person OR Staff (any name) ---- and the make two subclass Manager and Clerk (where each can implement there own functionlity of add and remove)
"Since there could be many fucntions like checkin(), inspect() that could be common to all employees. Therefore it would make sense to put them in a super class."
"Since, our store has 2 different kinds of Persons i.e. Manager and Clerk that can perform tasks in the store/on the inventory, it makes sense to have 'manager' and 'clerk' as subclasses of the superclass 'Person'."
"An Employee superclass can be used since the functions of Manager and Clerk are essentially the same (adding or deleting items from the inventory). The only difference is the conditions required to do so. So, the common attributes and methods could be stored in an Employee superclass."
"The store will have many other type of employees apart from manager and the clerk like the cashier, security guard, etc but in this case only manager and clerk are of relevance"
"Since manager and clerk both serve as employees of the inventory management system, and they both will have some common traits and functions - like able to view the inventory, able to edit profiles, get information, etc. - it is better to subclass them from the employee class. Also, their functionalities can then be modified as per requirements - when can a manager add/remove items and when a clerk can add/remove items by using polymorphism."
Item will be a super class which will consist of all the general properties that both price and cost have. The only difference between price and cost is retail and wholesale. There is difference in how they are represented by only few attributes and hence it will reduce the code duplication by making separate.
"It makes sense to use a subclass, since the the Manager and Clerk have common as well as different functionalities."
"A manager and a clerk are typically two users of the system. Even though their functionalities are different they might have few common attributes such as Name, ID Number, Working Hours, etc."
"Manager and Clerk would share common behaviors and attributes such as Name, Email, Address, etc. It makes sense to extract them out, keep them in Superclass, and let Subclasses inherit those behaviors."
Both manager and clerk perform the adding and removing item operations which can be defined in the super class staff. They can be overidden if required in the subclasses.
"manager and clerk are there in the requirement statement but both of them are a type of user to the inventory system. So, they might share some characteristics that is why we can make superclass as user and manager and the clerk will extend the user."
- Manager and Clerk perform the similar operations of adding and removing the items from the inventory. - The adding and removing operations would be same for both Manager and Clerk with difference that Manufacturer could be a collaborater for Manager (where we drop all items incase an item is discontinued) and Customer could be collaborater of the Clerk (where we would generally manipulate lesser number of items)- So the main class can handle the add / remove operations and as both Manager and Clerk are users of the System we can label the class as Users.
"They will have some common fields such as name, employee id, salary which can be put into the superclass."
The roles of manager and clerk are different enough to warrant the use of subclass in this scenario.
"Manager and Clerk may have some attributes (like employee id, profile details) and functionalities (manager & clerk can add or remove items from an inventory) that are in common and so it makes sense to derive them from an Employee superclass."
Employee will have some methods which will be common to the manager and clerk as they are also employees and share some come methods which identifies them as Employee's. For example getssn() or getid() could be applied for both the manager as well as clerk.
"Manager and Clerk are the human entities which will interface with the system. Both of them will have a lot of common attributes and methods. So, it is advisable to create a superclass containing common attributes and methods and then make 'Manager' and 'Clerk' as subclasses of 'User'."
"Apart from the operations that the system handles, in this scenario, there are 2 roles which can perform some operations.Both these roles are identified as type of users of the system - manager and clerk.Under superclass User, we can have two sub-classes - Manager and Clerk"
"Both Manager and Clerk are employees of the inventory, however they perform different roles. Hence we can create a class Employee that contains is inherited by both manager and clerk."
Stock will consist of details about the store. And some methods such as remove_from_stock can be used by subclasses Item or Inventory as if the item is ordered then it should be removed from the Inventory also.
"A system can be managed by an employee who can be a manager or a clerk. In the given statements, we can see that as a manager, we have different set of actions and as a clerk we have different set of actions. But if we see as an employee all the actions of manager and clerk are included in that class."
All the people working at the store are Employees.Manager is a EmployeeClerk is a Employee.
"both manager and clerk satisfy an 'is-a' association with User class, which may record basic details of the users in the system.But both manager and clerk change the number of items in inventory based on different criteria therefore they must have separate authorizations based on the different tasks."
"If we use a super class User we can make every attributes and methods available to all the Users regardless of their roles. Example: Profile details (name, email etc), login, logout features.In the sub classes we can add methods and variables needed by just that type of user i.e. Manager, Clerk."
"The manager and the clerk both perform the same tasks of adding and deleting items from the inventory, but under different conditions. Therefore, defining a superclass called employee that has add_item and delete_item methods and defining subclasses manager and employee that override those methods makes sense."
"Because it really matter that whether the changed quantity is bought or sold. What i mean is when bought some new item, then we should decrease the price or sth that wouldn't happened when we sold most of this item."
"There is a ""Is a"" relationship between employee and manager.also between clerk and employeeSo manager is a employeeClerk is a Employee."
We can have a User class that has some functionalities. The manager and clerk subclasses can inherit from User class and add additional functions as per the requirement to both the subclasses.
"The clerk and manager have responsibilities in common like seeing details of items in the inventory but also have separate responsibilities that should be kept apart like ""manager adds/removes items when a manufacturer introduces or discontinues an item"""
"Both the subclasses can have common functionalities like getOrderDetail etc. But at the same time the method to make an order (makeOrder) will have different implementations for CustomerOrder and StockOrder. Hence, they can inherit from Order and be subclass of it."
"Generally, we use super classes and sub classes when we need to share common functionality among classes. Here, although circumstances are different, both Manager and Clerk must be able to add item to and remove item from the inventory. Hence we can have an Employee class which implements logic of adding to and removing items from the inventory. Both Manager and Clerk can extend the Employee class to have the functionality."
"Manager and Clerk are both some kind of User, so we can make them subclasses of User."
"Because they can do the same actions such as add or remove items, it's a staff 's job. Then they can inherit those methods. It enables code reusability and saves time. Also, since they are different, they can modify or override those methods."
"Clerk and manager are both users, who can add or remove the item."
"The manager and clerk roles have the same functions - add and remove item from the inventory, but at different situations. So a parent class - User, can help on the structure, and Manager and Clerk class can overwrite the add and remove method based on their cases."
"We can follow the Is a ruleIs a manager a staff?Is a clerk a staff?Both satisfy the above rule so, manager and clerk can be subclasses of staff"
"Manager and Clerk are two different types of users, they should have all the things that a user does, eg. a name, an age, passwordAnd Manager and Clerk have different function and constraints, eg, work with inventory under different conditions, So Manager and Clerk should be 2 subclasses of User"
"Managers and clerks can both add and remove items. Both are going to need basic user functionality. These functionalities can be implemented in the User class. However, managers and clerks add/remove items under different conditions, so they will need to see different information."
"Because both a manager and a clerk have similar or identical actions, which can be generalized as the same interface in a superclass."
Manager and clerk has similar functions. We can use inheritance to avoid writing the same methods twice.
both the manager and the clerk have the ability to adds or removes items from the inventory. so we can create a superclass to implement this method.
"Because the clerk and the manager are the both employee, So they are the subclass of the employee which may not appera in the requirements."
Both the manager and clerk can add or remove an item so it optimal to have classes with similar features having superclass and subclass relationship
"Both the manager and clerk have similar roles and abilities within the system; therefore, their common methods and properties should be abstracted into a superclass, and the ways in which their functionalities diverge may be implemented in each subclass."
"The subclasses can be manager and clerk to the employee class, as it is quite possible that most of the attributes such as employee id, name, etc will be similar except the designation."
Both can add or remove items from the inventory. This is common functionality and according to DRY principle should be in a common place.
"This makes sense because both a manager and a clerk have a ""is-a"" relationship to employee."
"According to the requirements document, it can be seen that a manager can do everything that a clerk can do with a wider scope. So, Manager class should inherit all fields and methods of the Clerk class. Further, it can add specific methods and fields that are specific to the Manager class requirement."
"We need the Stock and Order class to keep track of the sale of items so that a reorder point can be adjusted. Because Stock and Order both belong to an specific Item, it makes sense to have them as the subclasses of the Item class."
"Because both manager and clerk will have many attributes in common like name, address, email, age, etc"
"Both the manager and clerk make changes to the same inventory, mostly consisting of the same add or remove actions. The key difference between these users is their permissions and the instance variables being changed by each user (ex. manager is instantiating new items, while clerk is most likely just adjusting quantity). In this case, the interfacing methods between both users and the inventory are the same, but the exact implementation differs."
"In this case, both Manager and Clerk may share common attributes (like name, address, income, etc.) and common functioanlity/methods (like adding or removing an item). Therefore the Superclass may contain only the shared attributes and methods."
manager can inherit inventory to use its functionalities.Further clerk can inherit manager
functionality to add/remove items from the inventory by manager and clerk are the same based on different conditions.
It make sense because the quantity bought and quantity sold are contained within quantity.
"Because manager and clerk are all users, they all have some sort of access to the system, like view the items. A user superclass should helperful to DRY the code."
"Technically there are items in stock, in the story currently, but there can also be items that are on their way, or on order (or back order). I think having stock and orders be subclasses of items might better help you keep track of an item's quantity and other metrics."
The inventory consists of a number of items and the recorder point is related to inventory
Because it is reasonable to say 'manager is a worker' and 'clerk is a worker'.
Manager and customer are both clerk. Manager and clerk may have different behaviors.